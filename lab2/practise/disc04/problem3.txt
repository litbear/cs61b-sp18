class A {

    public int x = 5;

    public void m1() {System.out.println("Am1-> " + x);}

    public void m2() {System.out.println("Am2-> " + this.x);}

    public void update() {x = 99;}

}

class B extends A {

    public void m2() {System.out.println("Bm2-> " + x);}

    public void m2(int y) {System.out.println("Bm2y-> " + y);}

    public void m3() {System.out.println("Bm3-> " + "called");}

}

class C extends B {

    public int y = x + 1;

    public void m2() {System.out.println("Cm2-> " + super.x);}

    // public void m4() {System.out.println("Cm4-> " + super.super.x);} // 不合法

    public void m5() {System.out.println("Cm5-> " + y);}

}

class D {

    public static void main (String[] args) {

        // B a0 = new A(); // 编译时错误 需要强转
        // a0.m1(); // 跳过
        // a0.m2(16); // 跳过
        A b0 = new B(); // 没问题

        System.out.println(b0.x); // 5

        b0.m1(); // Am1-> 5
        b0.m2(); // Bm2-> 5
        b0.m2(61); // 编译错误 运行时类型为 A 但没有指定签名的方法
        B b1 = new B(); // 没问题
        b1.m2(61); // Bm2y-> 61
        b1.m3(); // Bm3-> called
        A c0 = new C(); // 没问题 多态
        c0.m2(); // Cm2-> 5
        C c1 = (A) new C(); // 编译时错误 无法转换
        A a1 = (A) c0; // 没问题
        C c2 = (C) a1; // 没问题
        c2.m3(); // Bm3-> called
        // c2.m4(); // 有问题 删掉
        c2.m5(); // Cm5-> 6
        ((C) c0).m3(); // Bm3-> called
        (C) c0.m3(); // 编译时错误 m3 返回 void
        b0.update(); // 没问题
        b0.m1(); // Am1-> 99

    }

}